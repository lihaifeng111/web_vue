1.  先创建文件夹然后执行 git init    主要用来初始化一个空的git本地仓库。
    执行完上面的命令，当前目录下会自动生成.git隐藏文件夹，该隐藏文件夹就是git版本库

2.创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
   如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "lihaifeng111@example.com"

3.如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
   id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

4.登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

5.现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，
  这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
 首先，登陆GitHub，然后，在右上角找到“new repository”按钮，创建一个新的仓库

6.只需填写仓库名字即可，然后选public 然后创建仓库

7. 操作之后会出现一个页面，只需记住其http/ssh就行

8. 本地执行  git remote add origin git@github.com:（在第 7 步中ssh 的用户名以及仓库名)

9. 下一步，就可以把本地库的所有内容推送到远程库上：
    git push -u origin master（由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
        Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
       在以后的推送或者拉取时就可以简化命令。)
     push 成功后可以立刻在github上看到远程库的内容与本地一样

10.从现在起，只要本地作了提交，就可以通过命令：
    $ git push origin master
   把本地master分支的最新修改推送至GitHub




-------------------------------------------------------------------------------------
提交代码到远程仓库（本地没有关联这个仓库，将自己的代码提交到别人的仓库）
1. 新建文件夹，然后  git init
2. git clone  xxx(将远程仓库克隆下来) 比如远程项目名为  kkk  （克隆下来默认是远程的主分支）
3. 进入 kkk 后执行git init
4. 可以产看本地（git branch）和远程(git branch -a)的分支
5.创建本地分支并切换到那个分支（git checkout -b xxx）
6. 克隆下来后，不用关联远程仓库，直接拉去你需要的分支
7. 在你新建的分支中 git pull origin 远程分支名
8. 将你需要提交的代码放入你新建的那个分支
9. git add xxx
10. git commit -m"备注"
11. git push origin 本地新建的分支